// src/test/java/org/acme/todo/TodoResourceTest.java
package org.acme.todo;

import io.quarkus.test.junit.QuarkusTest;
import io.quarkus.test.InjectMock;
import jakarta.ws.rs.NotFoundException;
import jakarta.ws.rs.core.Response;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;

import java.util.Arrays;
import java.util.List;
import java.util.Map;

import static io.restassured.RestAssured.given;
import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.CoreMatchers.notNullValue;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.eq;

/**
 * Tests for the TodoResource REST endpoints.
 * Uses QuarkusTest for integration testing and Mockito for mocking the TodoService.
 */
@QuarkusTest
public class TodoResourceTest {

    // InjectMock allows mocking Quarkus beans
    @InjectMock
    TodoService todoService;

    private TodoItem todo1;
    private TodoItem todo2;

    @BeforeEach
    void setUp() {
        // Reset mocks before each test to ensure isolation
        Mockito.reset(todoService);

        todo1 = new TodoItem("1", "Buy groceries", false);
        todo2 = new TodoItem("2", "Walk the dog", true);
    }

    @Test
    void testGetAllTodos() {
        // Configure mock behavior
        List<TodoItem> mockTodos = Arrays.asList(todo1, todo2);
        Mockito.when(todoService.findAllTodos()).thenReturn(mockTodos);

        // Perform the REST call and assert the response
        given()
          .when().get("/todos")
          .then()
             .statusCode(200)
             .body("size()", is(2),
                   "[0].id", is("1"),
                   "[0].title", is("Buy groceries"),
                   "[0].completed", is(false),
                   "[1].id", is("2"),
                   "[1].title", is("Walk the dog"),
                   "[1].completed", is(true));

        // Verify that the service method was called
        Mockito.verify(todoService).findAllTodos();
    }

    @Test
    void testGetTodoByIdFound() {
        Mockito.when(todoService.findTodoById("1")).thenReturn(todo1);

        given()
          .when().get("/todos/{id}", "1")
          .then()
             .statusCode(200)
             .body("id", is("1"),
                   "title", is("Buy groceries"),
                   "completed", is(false));

        Mockito.verify(todoService).findTodoById("1");
    }

    @Test
    void testGetInsights() {
        // Arrange
        Map<String, Long> topWords = new java.util.LinkedHashMap<>();
        topWords.put("dog", 2L);
        topWords.put("walk", 1L);
        TodoInsights mockInsights = new TodoInsights(3, 1, 1.0/3.0, topWords);
        Mockito.when(todoService.getInsights()).thenReturn(mockInsights);

        // Act & Assert
        given()
          .when().get("/todos/insights")
          .then()
             .statusCode(200)
             .body("totalTasks", is(3),
                   "completedTasks", is(1),
                   "completionRatio", is( (float) (1.0/3.0) ), // RestAssured often deserializes numbers to float
                   "mostCommonWords.dog", is(2),
                   "mostCommonWords.walk", is(1));

        Mockito.verify(todoService).getInsights();
    }

    @Test
    void testGetTodoByIdNotFound() {
        // Simulate NotFoundException from the service
        Mockito.when(todoService.findTodoById("99")).thenThrow(new NotFoundException("Todo item with ID 99 not found."));

        given()
          .when().get("/todos/{id}", "99")
          .then()
             .statusCode(404)
             .body(is("Todo item with ID 99 not found.")); // Check the error message in the body

        Mockito.verify(todoService).findTodoById("99");
    }

    @Test
    void testCreateTodo() {
        TodoItem newTodo = new TodoItem(null, "New Task", false); // ID will be generated by service
        TodoItem createdTodo = new TodoItem("3", "New Task", false);

        Mockito.when(todoService.createTodo(any(TodoItem.class))).thenReturn(createdTodo);

        given()
          .contentType("application/json")
          .body(newTodo)
          .when().post("/todos")
          .then()
             .statusCode(201) // Expect 201 Created
             .header("Location", notNullValue()) // Check if Location header is present
             .body("id", is("3"),
                   "title", is("New Task"),
                   "completed", is(false));

        // Verify that createTodo was called with an item similar to newTodo (ignoring ID for comparison)
        Mockito.verify(todoService).createTodo(any(TodoItem.class));
    }

    @Test
    void testUpdateTodo() {
        TodoItem updatedTodoRequest = new TodoItem("1", "Buy groceries (updated)", true);
        TodoItem updatedTodoResponse = new TodoItem("1", "Buy groceries (updated)", true);

        Mockito.when(todoService.updateTodo(eq("1"), any(TodoItem.class))).thenReturn(updatedTodoResponse);

        given()
          .contentType("application/json")
          .body(updatedTodoRequest)
          .when().put("/todos/{id}", "1")
          .then()
             .statusCode(200)
             .body("id", is("1"),
                   "title", is("Buy groceries (updated)"),
                   "completed", is(true));

        Mockito.verify(todoService).updateTodo(eq("1"), any(TodoItem.class));
    }

    @Test
    void testUpdateTodoNotFound() {
        TodoItem nonExistentTodo = new TodoItem("99", "Non existent", false);
        Mockito.when(todoService.updateTodo(eq("99"), any(TodoItem.class)))
               .thenThrow(new NotFoundException("Todo item with ID 99 not found for update."));

        given()
          .contentType("application/json")
          .body(nonExistentTodo)
          .when().put("/todos/{id}", "99")
          .then()
             .statusCode(404)
             .body(is("Todo item with ID 99 not found for update."));

        Mockito.verify(todoService).updateTodo(eq("99"), any(TodoItem.class));
    }

    @Test
    void testDeleteTodo() {
        // No return value for delete, just verify it was called
        Mockito.doNothing().when(todoService).deleteTodo("1");

        given()
          .when().delete("/todos/{id}", "1")
          .then()
             .statusCode(204); // Expect 204 No Content

        Mockito.verify(todoService).deleteTodo("1");
    }

    @Test
    void testDeleteTodoNotFound() {
        Mockito.doThrow(new NotFoundException("Todo item with ID 99 not found for deletion."))
               .when(todoService).deleteTodo("99");

        given()
          .when().delete("/todos/{id}", "99")
          .then()
             .statusCode(404)
             .body(is("Todo item with ID 99 not found for deletion."));

        Mockito.verify(todoService).deleteTodo("99");
    }
}
